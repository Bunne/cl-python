;; -*- package: clpython.parser; readtable: py-ast-user-readtable -*-
;; 
;; This software is Copyright (c) Franz Inc. and Willem Broekema.
;; Franz Inc. and Willem Broekema grant you the rights to
;; distribute and use this software as governed by the terms
;; of the Lisp Lesser GNU Public License
;; (http://opensource.franz.com/preamble.html),
;; known as the LLGPL.

;;; Python grammar, defined for CL-Yacc parser

;; This is supposed to be the portable CL Python parser, as alternative to the yacc in Allegro.
;; But I can't get the CL-Yacc parser to run function CLYACC-TEST (below) successfully.
;; Perhaps the grammar rules given as input are wrong, or the states and goto's generated by
;; CL-Yacc are incorrect.

(in-package :clpython.parser)
(in-syntax *ast-user-readtable*)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (asdf:operate 'asdf:load-op :yacc))

(defvar *python-parser*)

(defmacro define-clyacc-python-parser ()
  `(yacc:define-parser *python-parser*
       #.`(:terminals ,(let (res)
                         (dolist (pkg '(:clpython.ast.reserved
                                        :clpython.ast.operator
                                        :clpython.ast.punctuation
                                        :clpython.ast.token))
                           (do-external-symbols (s (find-package pkg))
                             (push s res)))
                         (setf res (sort res #'string<))
                         res))
       
       (:precedence ((:left [or])
                     (:left [and] )
                     (:left [not] )
                     (:left [in]  ) ;; and "not in"
                     (:left [is]  ) ;; and "is not"
                     (:left [<] [<=] [>] [>=] [!=] [==] )
                     (:left [\|]  )
                     (:left [^]   )
                     (:left [&]   )
                     (:left [<<] [>>] )
                     (:left [+] [-] )
                     (:left [*] [/] [%] [//] )
                     (:left unary-plusmin )
                     (:left [~]   )
                     (:right [**] )
                     (:nonassoc high-prec)))
       
       (:start-symbol clpython.parser::print-stmt)

       ,@'#.(loop for name being the hash-key in clpython.parser::*python-prods*
                using (hash-value rules)
                collect `(,name ,@(loop for (terms outcome) in rules
                                      for $s = (loop for i from 1 to (length terms)
                                                   collect (intern (format nil "$~A" i) :clpython.parser))
                                      collect `(,@terms #'(lambda ,$s
                                                            (declare (ignorable ,@$s))
                                                            ,outcome)))))))

(define-clyacc-python-parser)

(defun clyacc-test ()
  ;; Test string: "print >> f, 42"
  (let* ((todo (copy-list '(([print] print)
                           ([>>] >>)
                           ([identifier] {f})
                           ([,] \,)
                           ([number] 42)
                           (nil nil))))
         (i 0)
         (lexer (lambda ()
                  (let ((list (pop todo)))
                    (warn "~A: ~A" i list)
                    (incf i)
                    (apply #'values list)))))
  (yacc:parse-with-lexer lexer *python-parser*)))
